#===================================================================================
# file         : rvsh
# 
# usage        : rvsh.sh [--admin | --connect <hostname> <username>]
#
# description  : commande shell qui permet de creer un r√©seau virtuel de machines
#                ainsi que de l'administrer
#
# options      : 
#   -h, --help       show this help message and quit
#   -a, --admin      log in the virtual machine as administrator
#   -c, --connect    log in the virtual machine as simple user
#                    you must specify the hostname and the username.
#                    (you can connect as a guest, use guest 
#                    for both username and hostname)
#
#   -i, --install    install this program and exit
#   -u, --uninstall  uninstall this program and exit
#
#
# authors      : G. MAHFOUDI & S. JUHEL
# company      : UTT
# version      : 1.0
# bugs         : 
# 1 - echo "hostname" a chaque connexion utilisateur
# 2 - switch user doit changer de repertoires
# notes        : ---
# created      : ---
# revision     : ---
#===================================================================================


#=== includes ======================================================================
source handle_connections.sh

source connect.sh
source passwd.sh
source rhost.sh
source su.sh
source passwd.sh
source who.sh
source rusers.sh
source write.sh
source msg.sh
source finger.sh
source cd.sh

source host.sh
source users.sh
source afinger.sh
source whoison.sh
#=== end includes ==================================================================


# Reset
NC='\e[0m'       # Text Reset


# Regular Colors
BLACK='\e[0;30m'        # Black
RED='\e[0;31m'          # Red
GREEN='\e[0;32m'        # Green
YELLOW='\e[0;33m'       # Yellow
BLUE='\e[0;34m'         # Blue
PURPLE='\e[0;35m'       # Purple
CYAN='\e[0;36m'         # Cyan
WHITE='\e[0;37m'        # White


ROOT="$HOME/rvsh"


make_help() {

    # admincmd
    echo 'Aide des commandes administrateur (tapez <cmd> -h pour plus de precrisions)

ls: liste les fichier du repertoire courant
cd: change de repertoire
mkdir: cree un repertoire
rmdir: supprime un repertoire 
pwd: affiche le repertoire courant
whoison: affiche tout les utilisateur connectes √† une machine 
host: ajoute/enleve une machine du reseau virtuel
users: ajoute/enleve un utilisateur du reseau virtuel
afinger: renseigne des information complementaire sur un utilisateur' > $ROOT/.help/admincmd

    # userscmd
    echo 'Aide des commandes utilisateur (tapez <cmd> -h pour plus de precisions)

ls: liste les fichier du repertoire courant
cd: change de repertoire
mkdir: cree un repertoire
rmdir: supprime un repertoire 
pwd: affiche le repertoire courant
text: editeur de texte en ligne
wall: envoie un message a tout le monde.
who: affiche la liste des utilisateurs connectes sur une VM
rusers: affiche la liste des utilisateurs connectes au reseau
rhost: affiche la liste des machines du reseau virtuel
connect: permet de se connecter a une autre machine
su: permet de change d utilisateur
passwd: change le mot de passe de l uitlisateur
finger: renvoie des elements complementaire sur l utilisateur
write: envoi un message a un utilisateur connecte' > $ROOT/.help/userscmd

}


install() {

    declare -a directories
    directories[0]='host'               # dossier des VMs
    directories[1]='users'              # dossier des utilisateurs
    directories[2]='users/admin'        # dossier administrateur
    directories[3]='.logs'              # dossier des logs
    directories[4]='.help'              # dossier de l'aide principale des commandes


    echo "[*] installing $(basename $0)..."

    # creation du dossier de partage
    if [ -d $ROOT ]
    then
        echo "install> '$ROOT' already exists..."
    else
        echo "install> making home directory in '$ROOT'"
        mkdir $ROOT
    fi

    echo -e "install> added directories:"
    for dir in ${directories[*]}
    do
        
        echo -e "\t'$dir' has been created"
        mkdir $ROOT/$dir
            
    done

    
    make_help
    
    echo "install> root account configuration..." # admin password creation
    touch $ROOT/users/admin/password
    echo "6f55b656e660c72e2e38b8a68c598703" > $ROOT/users/admin/password     

    echo "install> guest account configuration..."
    mkdir $ROOT/users/guest
    mkdir $ROOT/host/guest
    touch $ROOT/users/guest/password
    touch $ROOT/users/guest/hostlist && echo -e "guest\n" > $ROOT/users/guest/hostlist


    echo -e "install> Done."
}


uninstall() {
    echo "[*] uninstall $(basename $0)..."
    # userdel rvsh         # suppression de l'utilisateur
    # groupdel rvsh        # suppression du groupe
    rm -r $ROOT        # suppression de l'architecture personnelle
    exit
}


usage() {

    echo "Usage: $(basename $0) [--admin | --connect <hostname> <username>]"
    echo ""
    echo "  -h, --help       show this help message and quit"
    echo "  -a, --admin      log in the virtual machine as administrator"
    echo "  -c, --connect    log in the virtual machine as simple user"
    echo "                   you must specify the hostname and the username."
    echo "                   (you can connect as a guest, use guest for both username and hostname)"
    echo "  -i, --install    install this program and exit"
    echo "  -u, --uninstall  uninstall this program and exit"
    echo ""
    
    exit 1
}



# ====  READKEY  ======================================================
#
#        NAME : ReadKey
# DESCRIPTION : Lis les entr√©es claviers lettre par lettre, lis le
#               tampon si un caract√®re sp√©cial a √©t√© saisis.
# PARAMETER   : Pas de param√®tre.
# =====================================================================

ReadKey() {
    # Wait for first char
    if IFS="" read -n1 _REPLY; then
      # Read rest of chars
      while read -n1 -t 0.001 ; do
        _REPLY+="${REPLY}"
      done
    fi
}


# ====  HISTORY_CMD  ==================================================
#
#        NAME : history_cmd
# DESCRIPTION : G√®re l'appuie des touches sp√©ciales (haut,bas backspace)
#               afin de mettre en place le syst√®me d'historique de 
#               commande.
# PARAMETER   : Pas de param√®tre.
# =====================================================================
history_cmd() {

    if [ ! -e $ROOT/hist ]
    then
        touch $ROOT/hist
        echo -e "\n" >> $ROOT/hist
    fi


    stop="n"
    gd="n"
    i=$((1))
    tailleHist=$(($(cat $ROOT/hist | wc -l)))
    cmd=""
    posCurs=$((0))
    while [ "$stop" = "n" ]
    do

      stop="o"

      
        tmpCmd=${cmd:0:$(($posCurs))}
        echo -en "\r$(echo "$1 $cmd" | sed 's/./ /g')    \r"
        echo -en "$1 $cmd"
        echo -en "\r"
        echo -en "$1 $tmpCmd"
        

      tailleCmd=${#cmd}
      gd="n"
      ReadKey

      
      case $_REPLY in
        [A)

                i=$((i-1))

                if [ $i -eq 0 ]
                then
                  i=$((tailleHist))
                fi

                cmd=$(sed -n ${i}p $ROOT/hist)

                posCurs=$((${#cmd}+1))

                stop="n";;


        [B )


                i=$((i+1))

                if [ $i -eq $(($tailleHist+1)) ]
                then
                  i=$((1))
                fi

                cmd=$(sed -n ${i}p $ROOT/hist)

                posCurs=$((${#cmd}+1))

                stop="n";;

        [C ) 
                if [ ! $posCurs -eq $tailleCmd  ]
                then
                    posCurs=$(($posCurs+1))
                fi


                stop="n"
                gd="o"
                ;;

        [D ) 
                if [ ! $posCurs -eq 0 ]
                then
                    posCurs=$(($posCurs-1))
                fi

                stop="n"
                gd="o"
                ;;

        )
                if [ "$cmd" != "" ]
                then
                  cmd=${cmd:0:$(($posCurs-1))}${cmd:$posCurs}
                  tailleCmd=$(($tailleCmd-1))
                  if [ ! $posCurs -eq 0 ]
                  then
                    posCurs=$(($posCurs-1))
                  fi
                else
                  cmd=""
                fi
                stop="n";;
        "")     stop="o";;
        *)      
                tmpCmdStart=${cmd:0:$(($posCurs))}
                tmpCmdEnd=${cmd:$(($posCurs))}
                cmd=$tmpCmdStart$_REPLY$tmpCmdEnd
                tailleCmd=$(($tailleCmd+1))
                posCurs=$(($posCurs+1))
                stop="n";;
      esac
    done

    if [ "$cmd" != "" ]
    then
        echo -e "$cmd" >> $ROOT/hist
    fi
}


handle_users_cmd() {


    local username="$1"
    local hostname="$2"
    local ctime="$3"
    local cmd=""    # commande entree par l'utilisateur
    local user_prompt="${YELLOW}${username}${BLUE}@${YELLOW}${hostname}  $GREEN$location $BLUE>${NC}"
    location="/$username"
    
    while [ "$cmd" != "quit" ]
    do
        # echo -en "$user_prompt "
        # read tmp


        user_prompt="${YELLOW}${username}${BLUE}@${YELLOW}${hostname}  $GREEN$location $BLUE>${NC}"
        history_cmd "$user_prompt"




        tmp=$cmd

        cmd=($tmp)
        cmd=${cmd[0]}
        param=${tmp:${#cmd}}

        check_msg $username

        # lecture de la commande entree
        case "$cmd" in

        'quit' | 'q')
            disconnect "$username" "$hostname" "$ctime"
            return
            ;;

        'clear' | 'c')
            clear
            ;;

        'cd')
            echo "[!] commande en dev"
            ;;

        'ls')
            echo "[!] commande en dev"
            ;;

        'mkdir')
            echo "[!] commande en dev"
            ;;

        'rmdir')
            echo "[!] commande en dev"
            ;;

        'pwd')
            echo "[!] commande en dev"
            ;;


        'text')
            echo "[!] commande en dev"
            ;;

        'wall')
            echo "[!] commande en dev"
            ;;

        'who')
            who_is_connected_on $hostname            
            ;;

        'rusers')
            rusers
            ;;
        'rhost')
            rhost
            ;;

        'connect') 
            connect_to_vm $username $param
            ;;

        'su') 
            switch_user $hostname $param 
            ;;

        'passwd') 
            change_users_passwd $username
            ;;

        'finger')
            finger $param
            ;;

        'write')
            write "$param" "$username"
            ;;

        '')
            continue
            ;;

        '?') 
            help_cmd "user"
            ;;

        *) 
            echo -e "${YELLOW}$cmd : Commande non reconnue, '?' pour afficher les commandes disponnibles${NC}"
            ;;
        esac

   done
}


handle_admin_cmd() {

    local cmd=""    # commande entree par l'utilisateur
    local admin_prompt="${BLUE}rvsh $GREEN$location  $BLUE>${NC}"
    location="/rvsh"

    
    while [ ! \( "$cmd" = "quit" -o "$cmd" = "q" \) ]; do
        # echo -en "$admin_prompt "
        # read tmp

        admin_prompt="${BLUE}rvsh $GREEN$location  $BLUE>${NC}"
        history_cmd "$admin_prompt"

        tmp="$cmd"

        cmd=($tmp)
        cmd=${cmd[0]}
        param=${tmp:$((${#cmd}+1))}
        
        # lecture de la commande entreeuse
        case "$cmd" in

        'quit' | 'q')
            disconnect "admin" "rvsh"
            return
            ;;

        'clear' | 'c')
            clear
            ;;

        'cd')
            cd $location $param "admin"
            location=$_new_location
            ;;

        'ls')
            echo "[!] commande en dev"
            ;;

        'mkdir')
            echo "[!] commande en dev"
            ;;

        'rmdir')
            echo "[!] commande en dev"
            ;;

        'pwd')
            echo "[!] commande en dev"
            ;;

        'whoison')
            whoison $param
            ;;

        'afinger')
            afinger $param
            ;;

        'host')
            host "$param"
            ;;
        'users')
        
            users $param
            ;;

        # 'cd')
        #     cd $location $param "admin"
        #     location=$_new_location
        #     ;;

        # 'pwd')
        #     #echo "$location"
        #     ;;  
        # 'mkdir')
        #     #echo "${HOME}${location}/$(echo ${param} | awk -F' ' '{print $1}')"
        #     #mkdir ${HOME}${location}/$(echo ${param} | awk -F' ' '{print $1}')  
        #     ;;      
        '')
            continue
            ;;

        '?') 
            help_cmd "admin"
            ;;

        *) 
            echo -e "${YELLOW}$cmd : Commande non reconnue, '?' pour afficher les commandes disponnibles${NC}"
            ;;
        esac
    
   done
}


help_cmd() {

    local mode="$1"
    local file=""

    if [ "$mode" = "admin" ]; then
        file=$ROOT/.help/admincmd
    else
        file=$ROOT/.help/userscmd
    fi
    
    # on lit le fichier d'aide associ√© au mode
    echo -en "$(head -2 $file)\n\n"
    echo -en "$(cat $file | awk -F':' 'NR > 2 {printf "\e[0;33m%-12s\e[0m:%s\n", $1, $2}')\n\n" # don't touch it i'm very proud of that
}



####################################################
#
# SCRIPT BEGINING
#
####################################################


main() {

    # parse the command line
    ARGS=$(getopt -o hac:iu -l "help,admin,connect:,install,uninstall" -n "rvsh.sh" -- "$@");
    eval set -- $ARGS
        
    # variables
    admin_flag=""
    user_flag=""
    install_flag=""
    uninstall_flag=""

    hostname=""
    username=""



    # not enough arguments
    if [ $# -eq 1 ]
    then 
        usage
    fi

    while true; do
        
        case "$1" in
                
        -h | --help)
        shift
        usage
        ;;
            
            
        -a | --admin)
        shift
        admin_flag="on"
        
        break
        ;;
            
        -c | --connect)
        shift
        user_flag="on"
        hostname="$1"
        shift 2

        if [ -z "$1" ] 
        then
            echo "You must specify a username"
            exit
        else
            username="$1"
        fi 
        
        break
        ;;
            

        -i | --install)
        install
        break
        ;;

        -u | --uninstall)
        uninstall
        break
        ;;


        --)
        shift;
        break;
        ;;

        esac

    done
    

    clear
    echo "
  _______      _______ _    _ 
 |  __ \ \    / / ____| |  | |
 | |__) \ \  / / (___ | |__| |
 |  _  / \ \/ / \___ \|  __  |
 | | \ \  \  /  ____) | |  | |
 |_|  \_\  \/  |_____/|_|  |_|
 
"

    # si le mode administrateur est actif 
    # il prime sur le mode utilisateur 
    #
    if [ "$admin_flag" = "on" ]; then

        
        
        connect "admin" "rvsh" && \
        write_logs "admin" "rvsh" "connected" &&\
        handle_admin_cmd 

    elif [ "$user_flag" = "on" -a -z "$admin_flag" ]; then

        
        connect "$username" "$hostname" && \
        write_logs "$username" "$hostname" "connected" && \
        handle_users_cmd "$username" "$hostname" "$(date +%T)"

    else

        exit

    fi

}

main "$@"

####################################################
#
# SCRIPT END
#
####################################################